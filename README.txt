Техничесое задание:

Напиши скрипт на Powershell или приложение на .Net (C#). 
Скрипт / приложение должны уметь:
1. Запуститься и выкачать репозиторий: git@gitlab.com:kontur-tasks/trytobuild.git;
2. В заданный интервал времени проверять наличие изменений во всех ветках репозитория.
2. При обнаружении изменений в ветке выкачать их и собрать приложение.
3. Запустить приложение, сохранить консольный вывод в файл.
4. Запаковать приложение в NuGet-пакет со следующими метаданными:
                *ID пакета: название проекта / приложения, фиксированное значение;
                *Version: версия приложения, сформированная при сборке из исходников;
                *Description: консольный вывод приложения и хеш последнего коммита;
                *Authors: автор коммита.
5. Полученный NuGet-пакет выложить на www.nuget.org (или другой публичный NuGet-репозиторий).

* Задания со звездочкой: 
                a. Вынести настройки скрипта / приложения (URL-репозитория, частота проверки и другие) в файл конфигурации, либо передавать их при запуске в виде аргументов.
                b. Реализовать обработку исключений и отправка на почту неудачных попыток проверки изменений / сборки проекта / запаковки в NuGet-пакет.

				
____________________________________________________


Пререквизиты для успешной работы скрипта:

1. Наличие установленного Git, расположенного в директории: ProgramFiles\Git\bin\git.exe
2. Наличие Nuget, расположенного в директории: ProgramFiles\Nuget\nuget.exe
3. Наличие установленного Visual Studio 2017. VS 2017 использует в качестве директории хранения MSbuild.exe по умолчанию: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSbuild.exe
4. Доступ к сети Internet.

Git.exe, Nuget.exe, MSbuild.exe - вызываются в теле скрипта через Alias'ы. При первом проходе скрипта происходит проверка наличия соответвующих Alias'ов. В случае отсутствия они создаются. Первичные Warning сообщения об отсутствии Alias следует игнорировать.

Скрипт запускается с обязательным указанием ключей:
-TargetDirectory (Директория для хранения и сборки пакетов. Наличие указанной директории проверяется.)
-GitLabRepo (URL адрес репозитория)
-NumberofIterations (Количество итераций проверки появления новых коммитов)
-SecondsToSleep (Время в секундах между итерациями)

Пример использования:
PS> .\DevOps.ps1 -TargetDirectory C:\Temp -GitLabRepo https://gitlab.com/kontur-tasks/trytobuild.git -NumberofIterations 10 -SecondsToSleep 60

При первом проходе скрипта выполняются пункты: 1-5. При возникновении измений в ветке master, пункты 1-5 выполняются в новой директории с явным указанием времени произошедшего события в виде особого имени директории. Предыдущие директории не изменяются и не удаляются, чтобы была возможность отслеживать работоспособность скрипта и сохранять локально предыдущие версии проекта. Последующие проверки различия origin/master происходят между master на GitLab и последней версией локально сохранённого проекта. 

(Проверка работоспособности скрипта осуществлялась с помощью внесения изменений в локальный .txt файл README, находящийся в теле проекта. Тем самым достигалась разница между origin и master)

Для проверки отправки Nuget пакета необходимо вручную в скрипте задать переменную $NugetXMLversion. Учитывая, что ветка master не изменяется, версия по умолчанию всегда будет "1.0.0.0" (Отправка обновлённого Nuget пакета проверялась с помощью указания $NugetXMLversion = 1.0.0.1 - для повторной проверки необходимо указать версию "1.0.0.2" либо иную.)

В связи с вышенаписанным, ошибка Error 409 (A package with ID 'Test.skb.dev.dvs' and version '1.0.0' already exists and cannot be modified.) - должна игнорироваться.

ID пакета принудительно изменён в теле скрипта на ID+".skb.dev.dvs", так как "The package ID 'Test' is not available" на Nuget.org

В коде оставлено избыточное количество комментариев, позволяющих понять, что происходит на каждом этапе работы скрипта.

